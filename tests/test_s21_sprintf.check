#suite test_s21_sprintf

#test s21_sprintf_format_char_test
  char expected[SIZE];
  char actual[SIZE];

  char *format = "Hello World %c";
  char dataOutput = 'c';

  int expectedInt = sprintf(expected, format, dataOutput);
  int actualInt = s21_sprintf(actual, format, dataOutput);

  ck_assert_int_eq(expectedInt, actualInt);
  ck_assert_str_eq(expected, actual);


#test s21_sprintf_format_int_test
  char expected[SIZE];
  char actual[SIZE];

  char *format = "Hello World %d";
  int dataOutput = 616;

  int expectedInt = sprintf(expected, format, dataOutput);
  int actualInt = s21_sprintf(actual, format, dataOutput);

  ck_assert_int_eq(expectedInt, actualInt);
  ck_assert_str_eq(expected, actual);


#test s21_sprintf_format_float_test
  char expected[SIZE];
  char actual[SIZE];

  char *format = "Hello World %f";
  double dataOutput = 234.76;

  int expectedInt = sprintf(expected, format, dataOutput);
  int actualInt = s21_sprintf(actual, format, dataOutput);

  ck_assert_int_eq(expectedInt, actualInt);
  ck_assert_str_eq(expected, actual);


#test s21_sprintf_format_string_test
  char expected[SIZE];
  char actual[SIZE];

  char *format = "Hello World %s";
  char dataOutput[] = "Privet Mir";

  int expectedInt = sprintf(expected, format, dataOutput);
  int actualInt = s21_sprintf(actual, format, dataOutput);

  ck_assert_int_eq(expectedInt, actualInt);
  ck_assert_str_eq(expected, actual);


#test s21_sprintf_format_unsigned_test
  char expected[SIZE];
  char actual[SIZE];

  char *format = "Unsigned number: %u";
  unsigned int dataOutput = 12345;

  int expectedInt = sprintf(expected, format, dataOutput);
  int actualInt = s21_sprintf(actual, format, dataOutput);

  ck_assert_int_eq(expectedInt, actualInt);
  ck_assert_str_eq(expected, actual);


#test s21_sprintf_format_percent_test
  char expected[SIZE];
  char actual[SIZE];

  char *format = "Percent sign: %%";

  int expectedInt = sprintf(expected, format);
  int actualInt = s21_sprintf(actual, format);

  ck_assert_int_eq(expectedInt, actualInt);
  ck_assert_str_eq(expected, actual);


#test s21_sprintf_format_flags_test
  char expected[SIZE];
  char actual[SIZE];

  char *format = "With flags: %+d % d";
  int dataOutput1 = 42;
  int dataOutput2 = 42;

  int expectedInt = sprintf(expected, format, dataOutput1, dataOutput2);
  int actualInt = s21_sprintf(actual, format, dataOutput1, dataOutput2);

  ck_assert_int_eq(expectedInt, actualInt);
  ck_assert_str_eq(expected, actual);


#test s21_sprintf_format_width_test
  char expected[SIZE];
  char actual[SIZE];

  char *format = "Width: %10d";
  int dataOutput = 42;

  int expectedInt = sprintf(expected, format, dataOutput);
  int actualInt = s21_sprintf(actual, format, dataOutput);

  ck_assert_int_eq(expectedInt, actualInt);
  ck_assert_str_eq(expected, actual);


#test s21_sprintf_format_precision_test
  char expected[SIZE];
  char actual[SIZE];

  char *format = "Precision: %.5f";
  double dataOutput = 3.14159;

  int expectedInt = sprintf(expected, format, dataOutput);
  int actualInt = s21_sprintf(actual, format, dataOutput);

  ck_assert_int_eq(expectedInt, actualInt);
  ck_assert_str_eq(expected, actual);


#test s21_sprintf_format_length_test
  char expected[SIZE];
  char actual[SIZE];

  char *format = "Length: %ld";
  long dataOutput = 123456789L;

  int expectedInt = sprintf(expected, format, dataOutput);
  int actualInt = s21_sprintf(actual, format, dataOutput);

  ck_assert_int_eq(expectedInt, actualInt);
  ck_assert_str_eq(expected, actual);


#test s21_sprintf_complex_format_test
  char expected[SIZE];
  char actual[SIZE];

  char *format = "Complex: %+10.5f";
  double dataOutput = 3.14159;

  int expectedInt = sprintf(expected, format, dataOutput);
  int actualInt = s21_sprintf(actual, format, dataOutput);

  ck_assert_int_eq(expectedInt, actualInt);
  ck_assert_str_eq(expected, actual);
